<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PublishTo Condition="'$(PublishTo)' == '' ">$(SolutionDir)build\packages\</PublishTo>
    <PackageSourceRoot>$(MSBuildProjectDirectory)\..\</PackageSourceRoot>
    <PackageSourceRootFull>$([System.IO.Path]::GetFullPath($(PackageSourceRoot)))</PackageSourceRootFull>
    <PackageName>$([System.IO.Path]::GetDirectoryName($(PackageSourceRootFull)))</PackageName>
    <PackageName>$([System.IO.Path]::GetFileName($(PackageName)))</PackageName>
    <PackageSubFolder>$([System.IO.Path]::GetFileName($(MSBuildProjectDirectory)))</PackageSubFolder>
    <PackageSubFolder Condition="'$(PackageSubFolder)' == '$(PackageName)'">\</PackageSubFolder>
    <PackageSubFolder Condition="'$(PackageSubFolder)' != '$(PackageName)'">\$(PackageSubFolder)\</PackageSubFolder>
    <PackageTestName>$(PackageName).tests</PackageTestName>
  </PropertyGroup>

  <ItemGroup>
    <VersionFiles Include="$(IntermediateOutputPath)\$(AssemblyName).Version$(DefaultLanguageSourceExtension)" />
  </ItemGroup>

  <!-- Assemble all sources into a folder called (PackageName) -->
  <Target Name="EnumeratePackageFiles" Returns="@(SourcesToCopy)">
    <CreateItem
      Include="$(PackageSourceRootFull)**\*.*;$(SolutionDir)\extras\$(PackageName)\**\*.*"
      Exclude="$(PackageSourceRootFull)**\*.csproj*;$(PackageSourceRootFull)**\*.ncrunch*;$(PackageSourceRootFull)**\obj\**;$(PackageSourceRootFull)version.json*;$(PackageSourceRootFull)Tests\**;$(SolutionDir)\extras\$(PackageName)\Tests\**">
      <Output TaskParameter="Include" ItemName="SourcesToCopy" />
    </CreateItem>
  </Target>

  <Target Name="CopySourcesToPackmanPackage"
    DependsOnTargets="EnumeratePackageFiles"
    AfterTargets="AfterBuild"
    Inputs="@(SourcesToCopy);@(VersionFiles)"
    Outputs="@(SourcesToCopy->'$(PublishTo)$(PackageName)\%(RecursiveDir)%(Filename)%(Extension)');@(VersionFiles->'$(PublishTo)$(PackageName)$(PackageSubFolder)Version%(Extension)')"
    Returns="$Ran"
    >

    <MakeDir Directories="$(PublishTo)$(PackageName)" />

    <Copy
      SourceFiles="@(SourcesToCopy)"
      DestinationFiles="@(SourcesToCopy->'$(PublishTo)$(PackageName)\%(RecursiveDir)%(Filename)%(Extension)')"
      SkipUnchangedFiles="true" />

    <Copy
      SourceFiles="@(VersionFiles)"
      DestinationFiles="@(VersionFiles->'$(PublishTo)$(PackageName)$(PackageSubFolder)Version%(Extension)')"
      SkipUnchangedFiles="true" />

      <ItemGroup>
        <Ran Include="true" />
      </ItemGroup>

    </Target>

    <Target Name="UpdatePackageJson" AfterTargets="CopySourcesToPackmanPackage" Condition="'$(Ran)' == 'true' ">

    <FileUpdate 
      Files="$(PublishTo)$(PackageName)\package.json" 
      Regex="&quot;version&quot;: &quot;.*&quot;" 
      ReplacementText="&quot;version&quot;: &quot;$(NuGetPackageVersion)&quot;">
      <Output TaskParameter="AllItemsUpdated" PropertyName="FileWasStamped" />
    </FileUpdate>

    <FileUpdate 
      Files="$(PublishTo)$(PackageName)\package.json" 
      Regex="(&quot;com\.spoiledcat\..*&quot;): &quot;.*&quot;" 
      ReplacementText="$1: &quot;$(NuGetPackageVersion)&quot;" />

    <FileUpdate 
      Files="$(PublishTo)$(PackageName)\package.json" 
      Regex="(&quot;com\.spoiledcat\..*&quot;): &quot;.*&quot;" 
      ReplacementText="$1: &quot;$(NuGetPackageVersion)&quot;" />

    <FileUpdate 
      Files="$(PublishTo)$(PackageName)\package.json" 
      Regex="&quot;directory&quot;: &quot;.*&quot;" 
      ReplacementText="&quot;directory&quot;: &quot;src/$(PackageName)&quot;" />

    <Message Importance="High" Text="Stamping version $(NuGetPackageVersion)" Condition=" '$(FileWasStamped)' == 'true' "/>

  </Target>


  <!-- 
    PACKAGE TESTS
  -->

  <!-- Assemble all test files in a Tests folder into a package called (PackageName).tests -->
  <Target Name="EnumeratePackageTestFiles" Returns="@(TestsToCopy)">
    <CreateItem
      Include="$(PackageSourceRootFull)\Tests\**\*.*;$(SolutionDir)\extras\$(PackageName)\Tests\**\*.*"
      Exclude="$(PackageSourceRootFull)\Tests\**\*.csproj*;$(PackageSourceRootFull)\Tests\**\*.ncrunch*;$(PackageSourceRootFull)\Tests\**\obj\**;$(PackageSourceRootFull)\Tests\Helpers~\$(AssemblyName)*;$(PackageSourceRootFull)\Tests\Helpers~\nunit*;$(PackageSourceRootFull)\Tests\Helpers~\*Test*;$(PackageSourceRootFull)\Tests\Helpers~\Castle*;$(PackageSourceRootFull)\Tests\Helpers~\Microsoft*;$(PackageSourceRootFull)\Tests\Helpers~\System.*;$(PackageSourceRootFull)\Tests\Helpers~\NSubstitute*
      ">
      <Output TaskParameter="Include" ItemName="TestsToCopy" />
    </CreateItem>
  </Target>

  <Target Name="CopyTestsToPackmanPackage"
    Condition="Exists('$(PackageSourceRootFull)\Tests')"
    DependsOnTargets="EnumeratePackageTestFiles"
    AfterTargets="AfterBuild"
    Inputs="@(TestsToCopy);@(VersionFiles)"
    Outputs="@(TestsToCopy->'$(PublishTo)$(PackageTestName)\%(RecursiveDir)%(Filename)%(Extension)');@(VersionFiles->'$(PublishTo)$(PackageTestName)$(PackageSubFolder)Version%(Extension)')"
    >

    <MakeDir Directories="$(PublishTo)$(PackageTestName)" />

    <Copy
      SourceFiles="@(TestsToCopy)"
      DestinationFiles="@(TestsToCopy->'$(PublishTo)$(PackageTestName)\%(RecursiveDir)%(Filename)%(Extension)')"
      SkipUnchangedFiles="true">
      <Output TaskParameter="CopiedFiles" ItemName="FilesCopied" />
    </Copy>

    <Copy
      SourceFiles="@(VersionFiles)"
      DestinationFiles="@(VersionFiles->'$(PublishTo)$(PackageTestName)$(PackageSubFolder)Version%(Extension)')"
      SkipUnchangedFiles="true" />

  </Target>
    
  <Target Name="StampPackageTestVersion"
    AfterTargets="CopyTestsToPackmanPackage"
    Condition="Exists('$(PackageSourceRoot)\Tests')">

    <FileUpdate 
      Files="$(PublishTo)$(PackageTestName)\package.json" 
      Regex="&quot;version&quot;: &quot;.*&quot;" 
      ReplacementText="&quot;version&quot;: &quot;$(NuGetPackageVersion)&quot;">
      <Output TaskParameter="AllItemsUpdated" PropertyName="FileWasStamped" />
    </FileUpdate>

    <FileUpdate 
      Files="$(PublishTo)$(PackageTestName)\package.json" 
      Regex="(&quot;com\.spoiledcat\..*&quot;): &quot;.*&quot;" 
      ReplacementText="$1: &quot;$(NuGetPackageVersion)&quot;" />

    <FileUpdate 
      Files="$(PublishTo)$(PackageTestName)\package.json" 
      Regex="(&quot;com\.spoiledcat\..*&quot;): &quot;.*&quot;" 
      ReplacementText="$1: &quot;$(NuGetPackageVersion)&quot;" />

    <FileUpdate 
      Files="$(PublishTo)$(PackageTestName)\package.json" 
      Regex="&quot;directory&quot;: &quot;.*&quot;" 
      ReplacementText="&quot;directory&quot;: &quot;src/$(PackageName)/Tests&quot;" />

    <Message Importance="High" Text="Stamping version $(NuGetPackageVersion)" Condition=" '$(FileWasStamped)' == 'true' "/>

  </Target>



  <!-- Helper to get the updated version from the Nerdbank.GitVersioning nuget task -->
  <Target Name="CheckIfVersionChanged" BeforeTargets="GenerateAssemblyVersionInfo" AfterTargets="GetBuildVersion" Returns="$(VersionHasChanged)">
    <PropertyGroup>
      <VersionSourceFile>$(IntermediateOutputPath)\$(AssemblyName).Version$(DefaultLanguageSourceExtension)</VersionSourceFile>
      <NewVersionSourceFile>$(VersionSourceFile).newnew</NewVersionSourceFile>
    </PropertyGroup>
    <MakeDir Directories="$(IntermediatePath)"/>
    <Nerdbank.GitVersioning.Tasks.AssemblyVersionInfo
                  OutputFile="$(NewVersionSourceFile)"
                  CodeLanguage="$(Language)"
                  AssemblyVersion="$(AssemblyVersion)"
                  AssemblyFileVersion="$(AssemblyFileVersion)"
                  AssemblyInformationalVersion="$(AssemblyInformationalVersion)"
                  AssemblyName="$(AssemblyName)"
                  RootNamespace="$(RootNamespace)"
                  AssemblyOriginatorKeyFile="$(AssemblyOriginatorKeyFile)"
                  AssemblyTitle="$(AssemblyTitle)"
                  AssemblyProduct="$(AssemblyProduct)"
                  AssemblyCopyright="$(AssemblyCopyright)"
                  AssemblyCompany="$(AssemblyCompany)"
                  AssemblyConfiguration="$(Configuration)"
                  GitCommitId="$(GitCommitId)"
                  GitCommitDateTicks="$(GitCommitDateTicks)"
                  EmitNonVersionCustomAttributes="$(NBGV_EmitNonVersionCustomAttributes)"
                  />
    <!-- Avoid applying the newly generated AssemblyVersionInfo.cs file to the build
         unless it has changed in order to allow for incremental building. -->
    <Nerdbank.GitVersioning.Tasks.CompareFiles OriginalItems="$(VersionSourceFile)" NewItems="$(NewVersionSourceFile)">
      <Output TaskParameter="AreChanged" PropertyName="VersionHasChanged" />
    </Nerdbank.GitVersioning.Tasks.CompareFiles>
  </Target>
</Project>